# -*- coding: utf-8 -*-
"""
Created on Tue Feb 11 13:22:41 2020

@author: gres6121
"""
################################################################
#
# Austin Gress
# ECE 351-51
# Lab: 
# Due Date:
# Additional Comments:
################################################################

import numpy as np
import matplotlib.pyplot as plt
import scipy as sig
import control as con
import pandas as pd

#%% PreDefined Functions
def u(t):
    y = np.zeros((len(t), 1))
    
    
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = 1
        else:
            y[i] = 0
    return y

steps = 1e-4
t = np.arange(-1, 1 + steps, steps)
y = u(t)

plt.figure(figsize = (10,7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Step Function')
plt.grid()
plt.show()

def r(t):
    y = np.zeros((len(t), 1))
    
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = t[i]
        else:
            y[i] = 0
    return y

steps = 1e-4
t = np.arange(-1, 1 + steps, steps)
y = r(t)

plt.figure(figsize = (10,7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Ramp Function')
plt.grid()
plt.show()

#%% Task 1

#Always first!!!!!!!!!!
steps = 1e-2
t = np.arange(0, 20 + steps, steps)


f1 = u(t-2)-u(t-9)

f2 = np.exp(-t) #*u(t)

f3 = r(t-2)*(u(t-2)-u(t-3))+r(4-t)*(u(t-3)-u(t-4))


plt.figure(figsize = (10,7))
plt.subplot(3, 1, 1)
plt.plot(t, f1)
plt.ylabel('f(t) function')
plt.title('F1')
plt.grid()

plt.subplot(3, 1, 2)
plt.plot(t, f2)
plt.ylabel('F2')
plt.grid()

plt.subplot(3, 1, 3)
plt.plot(t, f3)
plt.ylabel('F3')
plt.grid()
plt.show()


#%% Task 2

def Convo(f1, f2):
    Nf1 = len(f1)
    Nf2 = len(f2)
    f1Extended = np.append(f1, np.zeros((1, Nf2-1)))
    f2Extended = np.append(f2, np.zeros((1, Nf2-1)))
    results = np.zeros(f1Extended.shape)
        
    for i in range(Nf2 + Nf1 - 2):
        results[i] = 0
        for j in range(Nf1):
            if(i-j+1 > 0):
                try:
                    results[i] += f1Extended[i]*f2Extended[i-j+1]
                except:
                    print(i,j)
    return results

steps = 1e-2
t = np.arange(0, 20 + steps, steps)
NN = len(t)
tExtended = np.arange (0,2 * t[NN-1], steps)
convl2 = Convo (f1, f2) * steps
#convl2check = sig.convolve(f1, f2) * steps
plt.figure (figsize = (10,7))
plt.plot (tExtended, convl2, label = 'User-Defined')
#plt.plot(tExtended, convl2check, label = 'Built-in')


plt.subplot(3, 1, 1)
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.ylabel('f1 * f2')
plt.title('Convolution')
plt.grid()

convl2 = Convo (f2, f3) * steps

plt.subplot(3, 1, 2)
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.ylabel('f2 * f3')
plt.grid()

convl2 = Convo (f1, f3) * steps

plt.subplot(3, 1, 3)
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.ylabel('f1 * f3')
plt.grid()
plt.show()
