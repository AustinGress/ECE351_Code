# =============================================================================
#  =============================================================================
#  # -*- coding: utf-8 -*-
#  """
#  Created on Tue Feb  4 13:16:04 2020
#  
#  @author: GRES6121
#  """
#  ################################################################
#  #
#  # Austin Gress
#  # ECE 351-51
#  # Lab: 
#  # Due Date:
#  # Additional Comments:
#  ################################################################
#  
# =============================================================================

import numpy as np
import matplotlib.pyplot as plt
import scipy as sig
import control as con
import pandas as pd
 
 #%%Task 1
plt.rcParams.update({'font.size': 14})

steps = 1e-2
t = np.arange(0,5+steps, steps)

print('Number of Elements: len(t) = ', len(t), '\nFirst Element: t[0] = ',
      t[0], '\nLast Element: t[len(t)-1] = ', t[len(t)-1])

def example1(t):
    y = np.zeros(t.shape)
    
    for i in range(len(t)):
        if i < (len(t) + 1)/3:
            y[i] = t[i]**2
        else:
            y[i] = np.sin(5*t[i]) + 2
    return y

y = example1(t)

plt.figure(figsize = (10,7))
plt.subplot(2, 1, 1)
plt.plot(t, y)
plt.grid()
plt.ylabel('y(t) with Good Resolution')
plt.title('Background - Illustration of for Loops and if/else Statements')

t = np.arange(0, 5 + 0.25, 0.25)
y = example1(t)

plt.subplot(2,1,2)
plt.plot(t, y)
plt.grid()
plt.ylabel('y(t) with Poor Resolution')
plt.xlabel('t')
plt.show()

#%%Task 2

def funct1(t):
    y = np.cos(t)
    return y

t = np.arange(0, 10 + 0.25, 0.25)
h = funct1(t)


plt.figure(figsize = (10,7))
plt.subplot(2, 1, 1)
plt.plot(t, h)
plt.grid()
plt.ylabel('y(t) function')
plt.title('Cosine Function')
plt.show()

#%%Task 3

def u(t):
    y = np.zeros((len(t), 1))
    
    
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = 1
        else:
            y[i] = 0
    return y

steps = 1e-4
t = np.arange(-1, 1 + steps, steps)
y = u(t)

plt.figure(figsize = (10,7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Step Function')
plt.grid()
plt.show()

#Delta
# =============================================================================
# def d(t):
#     y = np.zeros((len(t),1))
#     
#     for i in range(len(t)):
#         if t[i] < 0:
#             y[i] = 0
#         if t[i] > 0:
#             y[i] = 0
#         else:
#             y[i] = 1
#     return y
# 
# steps = 1e-4
# t = np.arange(-1, 1 + steps, steps)
# y = d(t)
# 
# plt.figure(figsize = (10,7))
# plt.plot(t, y)
# plt.ylabel('y(t) function')
# plt.title('Delta Function')
# plt.grid()
# plt.show()
# =============================================================================

def r(t):
    y = np.zeros((len(t), 1))
    
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = t[i]
        else:
            y[i] = 0
    return y

steps = 1e-4
t = np.arange(-1, 1 + steps, steps)
y =r(t)

plt.figure(figsize = (10,7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Ramp Function')
plt.grid()
plt.show()

def funct2(t):
    y = r(t)-r(t-3)+5*u(t-3)-2*u(t-6)-2*r(t-6)
    return y

steps = 1e-4
t = np.arange(-5, 15 + steps, steps)
y = funct2(t)

plt.figure(figsize = (10, 7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Graph of Figure 2')
plt.grid()
plt.show()

 #%%Task 4

y = funct2(-t)

plt.figure(figsize = (10, 7))
plt.plot(t, y)
plt.ylabel('f(-t)')
plt.title('Graph of Figure 2')
plt.grid()
plt.show()

y = funct2(t-4)

plt.figure(figsize = (10, 7))
plt.plot(t, y)
plt.ylabel('f(t-4)')
plt.title('Graph of Figure 2')
plt.grid()
plt.show()


y = funct2(-t-4)

plt.figure(figsize = (10, 7))
plt.plot(t, y)
plt.ylabel('f(-t-4)')
plt.title('Graph of Figure 2')
plt.grid()
plt.show()


y = funct2(t/2)

plt.figure(figsize = (10, 7))
plt.plot(t, y)
plt.ylabel('f(t/2)')
plt.title('Graph of Figure 2')
plt.grid()
plt.show()


y = funct2(2*t)

plt.figure(figsize = (10, 7))
plt.plot(t, y)
plt.ylabel('f(2*t)')
plt.title('Graph of Figure 2')
plt.grid()
plt.show()


steps = 1e-2
t = np.arange(-5, 10+steps, steps)   

y = funct2(t)
dt = np.diff(t)
dy = np.diff(y, axis = 0)/dt

plt.figure(figsize = (10,7))
plt.plot(t, y, '--', label = 'y(t)')
plt.plot(t[range(len(dy))], dy, label = 'dy(t)/dt')
plt.title('Derivative WRT time')
#plt.legend()
plt.grid()
plt.ylim([-2,10])
plt.show()



