# -*- coding: utf-8 -*-
"""
Created on Tue Feb 18 13:14:37 2020

@author: gres6121
"""
################################################################
#
# Austin Gress
# ECE 351-51
# Lab: 
# Due Date:
# Additional Comments:
################################################################

import numpy as np
import matplotlib.pyplot as plt
import scipy as sig
import control as con
import pandas as pd

#%% User Defined Functions
def Convo(f1, f2):
    Nf1 = len(f1)
    Nf2 = len(f2)
    f1Extended = np.append(f1, np.zeros((1, Nf2-1)))
    f2Extended = np.append(f2, np.zeros((1, Nf2-1)))
    results = np.zeros(f1Extended.shape)
        
    for i in range(Nf2 + Nf1 - 2):
        results[i] = 0
        for j in range(Nf1):
            if(i-j+1 > 0):
                try:
                    results[i] += f1Extended[j]*f2Extended[i-j+1]
                except:
                    print(i,j)
    return results

#steps = 1e-2
#t = np.arange(0, 20 + steps, steps)
#NN = len(t)
#tExtended = np.arange (0,2 * t[NN-1], steps)
#convl2 = Convo (f1, f2) * steps
##convl2check = sig.convolve(f1, f2) * steps
#plt.figure (figsize = (10,7))
#plt.plot (tExtended, convl2, label = 'User-Defined')
##plt.plot(tExtended, convl2check, label = 'Built-in')


def u(t):
    y = np.zeros(t.shape)
    
    
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = 1
        else:
            y[i] = 0
    return y

steps = 1e-4
t = np.arange(-1, 1 + steps, steps)
y = u(t)

plt.figure(figsize = (10,7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Step Function')
plt.grid()
plt.show()

def r(t):
    y = np.zeros((len(t), 1))
    
    for i in range(len(t)):
        if t[i] >= 0:
            y[i] = t[i]
        else:
            y[i] = 0
    return y

steps = 1e-4
t = np.arange(-1, 1 + steps, steps)
y = r(t)

plt.figure(figsize = (10,7))
plt.plot(t, y)
plt.ylabel('y(t) function')
plt.title('Ramp Function')
plt.grid()
plt.show()

#%% Task 1

steps = 1e-2
t = np.arange(-10, 10 + steps, steps)
f = 0.25
w = 2*f*np.pi 


h1 = np.exp(2*t)*u(1-t)
  
h2 = u(t-2)-u(t-6)

h3 = np.cos(w*t)*u(t)

plt.figure(figsize = (10,7))
plt.subplot(3, 1, 1)
plt.plot(t, h1)
plt.ylabel('Function exp')
plt.title('Functions')
plt.grid()

plt.subplot(3, 1, 2)
plt.plot(t, h2)
plt.ylabel('Function steps')
plt.grid()

plt.subplot(3, 1, 3)
plt.plot(t, h3)
plt.ylabel('Function cosine step')
plt.xlabel('Time')
plt.grid()
plt.show()

#%% Task 2

NN = len(t)
tExtended = np.arange (2*t[0], 2*t[NN-1] + steps, steps)
convl2 = Convo (h1, u(t)) * steps
convl2check = sig.convolve(h1, u(t)) * steps
plt.figure (figsize = (10,7))
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.plot(tExtended, convl2check,'--', label = 'Built-in')


plt.subplot(3, 1, 1)
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.plot(tExtended, convl2check,'--', label = 'Built-in')
plt.ylabel('H1 Response')
plt.title('Convolution')
plt.grid()
plt.legend()

convl2 = Convo (h2, u(t)) * steps
convl2check = sig.convolve(h2, u(t)) * steps


plt.subplot(3, 1, 2)
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.plot(tExtended, convl2check,'--', label = 'Built-in')
plt.ylabel('H2 Response')
plt.grid()
plt.legend()

convl2 = Convo (h3, u(t)) * steps
convl2check = sig.convolve(h3, u(t)) * steps


plt.subplot(3, 1, 3)
plt.plot (tExtended, convl2, label = 'User-Defined')
plt.plot(tExtended, convl2check,'--', label = 'Built-in')
plt.ylabel('H3 Response')
plt.xlabel('Time')
plt.grid()
plt.legend()
plt.show()

#%% Hand Plots
t = tExtended

f1 = 0.5*np.exp(2*t)*u(1-t)+0.5*np.exp(2)*u(t-1)
  
f2 = (t-2)*u(t-2)-(t-6)*u(t-6)

f3 = (1/w)*np.sin(w*t)*u(t)

plt.figure(figsize = (10,7))
plt.subplot(3, 1, 1)
plt.plot(t, f1)
plt.ylabel('Function exp')
plt.title('Hand Functions')
plt.grid()

plt.subplot(3, 1, 2)
plt.plot(t, f2)
plt.ylabel('Function steps')
plt.grid()

plt.subplot(3, 1, 3)
plt.plot(t, f3)
plt.ylabel('Function cosine step')
plt.xlabel('Time')
plt.grid()
plt.show()
