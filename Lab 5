# -*- coding: utf-8 -*-
"""
Created on Tue Feb 25 13:36:05 2020

@author: gres6121
"""
################################################################
#
# Austin Gress
# ECE 351-51
# Lab: 
# Due Date:
# Additional Comments:
################################################################

import numpy as np
import matplotlib.pyplot as plt
import scipy.signal as sig
import control as con
import pandas as pd


#%% Part 1: Sine Method and Built in Impulse Function Plots

R = 1000
L = 0.027
C = 100*10**-9

steps = 1e-8
t = np.arange(0, 1.2e-3 + steps, steps)

def my_step(t): #Built in Step Function
    f = np.zeros(t.shape)
    
    
    for i in range(len(t)):
        if t[i] >= 0:
            f[i] = 1
        else:
            f[i] = 0
    return f


def sine_method(R,L,C,t): #Defined Sine Method
    y = np.zeros(t.shape)
    alpha = -(1/(2*R*C))
    omega = ((1/2)*np.sqrt(((1/(R*C))**2)-4*((1/(np.sqrt(L*C)))**2)+0*1j))
    p = alpha + omega
    g = (1/(R*C))*p 
    g_mag = np.abs(g)
    g_rad = np.angle(g)
    g_deg = g_rad*(180/np.pi)
    y = ((g_mag/np.abs(omega))*np.exp(alpha*t)*np.sin(np.abs(omega)*t+g_rad)  
        *my_step(t))
    
    return y #See lab report for written equation

y = sine_method(R,L,C,t)

plt.figure(figsize = (10,7))
plt.subplot(3,1,1)
plt.plot(t, y)
plt.ylabel('Sine Method')
plt.title('Transfer Function Plot')
plt.grid()
plt.show()

num = [1/(R*C), 0] 
den = [1, 1/(R*C), (1/(np.sqrt(L*C)))**2] 

tout , yout = sig.impulse((num , den), T = t)

plt.plot(tout, yout)
plt.subplot(3,1,2)
plt.ylabel('Impulse function')
plt.grid()
plt.show()


#%% Part 2: Step Function Built in Plot
num = [1/(R*C), 0] 
den = [1, 1/(R*C), (1/(np.sqrt(L*C)))**2] 

tout , yout = sig.step((num , den), T = t)


plt.plot(tout, yout)
plt.ylabel('F(t) function')
plt.title('Step Function')
plt.grid()
plt.show()


